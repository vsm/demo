More info on this demo:

Contents:
  1) JSON editing
  2) Image output
  3) Three styles: normal, white, sketch
  4) SVG tweaks
  5) Demoing

  A1) Appendix 1: Convert SVG TO EMF
  A2) Appendix 2: Convert SVG to outlined SVG



1) == JSON editing ==

• You can edit or for example paste VSM-JSON in the large textarea.
  The linked vsm-box will immediately show the corresponding VSM-sentence.

• The VSM-JSON automatically updates along with any edits you make in the vsm-box.
  After you entered a VSM-sentence, or perhaps designed a VSM-template,
  you could copy this JSON, save it in a text file, and then be able to paste it back there later.


2) == Image output ==

• You can export a VSM-sentence to either one of:
  ◦ a PNG image (but this may easily become blurred when embedded in a PDF),
  ◦ an SVG+html image (not recommended),
  ◦ an 'pure' SVG image (a sharp, lightweight vector format, recommended).

• If you set a `delay ..` for e.g. 3 seconds and then click the `Download SVG` button,
  then you still have some time to go mouse-hover any connector you may want to see highlighted
  in the image, before the Save dialog appears.


3) == Three styles: normal, white, sketch ==

• Check the `✓ White box` option to remove the vsm-box border and background,
  ◦ The `✓ auto-white` option automatically checks that option when you click Download.
  ◦ Disable both `auto-white` and `White box` to create SVGs with vsm-box border and background.

• Check the `✓ Sketch` option to apply a sketch-style appearance.

• Purpose of the three appearances:
  ◦ Normal:    to show a VSM-sentence as how it appears inside a vsm-box user-interface.
  ◦ White box: to focus on the VSM-sentence on its own.
  ◦ Sketch:    to focus on the connector-structure, mainly.


4) == SVG tweaks ==

• See Appendix 1 and 2 below for how to:
  ◦ convert SVG to EMG properly (e.g. for Word or Google Docs), or
  ◦ convert all text and paths to 'outlines' (e.g. for placing the SVG on a website,
    and users may not have a necessary font installed).

• The SVG includes *hidden elements* that can be made visible if needed. They are white or have 0% opacity:

  1. a text cursor:  in the empty VSM-term that last had the focus;
  2. a mouse cursor and click-indicating stripes:  over the last leg of the highlighted connector, if any;
  3. a hover-highlighted version of a connector-highlighter's remove-icon.

  ◦ To make these visible, it is easiest to:
    Open the SVG in a text-editor, then find and replace:
    1. `class="textcursor hide"` by `class="textcursor"` for the textcursor.
    2. `class="mouse hide"`      by `class="mouse"`      for the mouse,
       `class="click hide"`      by `class="click"`      for the click-stripes,
    3. `class="ri-bg"`           by `class="ri-bg hl"`   and
       `class="ri-fg"` (twice)   by `class="ri-fg hl"`   for the hovered remove-icon.

• In order to generate an SVG that includes the input-field at the end of a vsm-box: first place
  some text in this input (use a space if it should be shown as empty), and then download the SVG.

• If you dowload an SVG that includes the vsm-box border but the vsm-box has grown too wide:
  first hit Ctrl+Del in the input-field behind the last term. This narrows it.


5) == Demoing ==

• If you give a live demo or presentation on VSM, you can make the audience focus on just the vsm-box:
  you can move the top info panel and the bottom JSON textarea out of sight by using the
  whitespace-resizing handles, just above and below the JSON textarea's right side.





6) ===== Appendix 1:  Convert SVG TO EMF =====


How to convert SVG to EMF  (and avoid losing precision or font data):

  + Note: You should have the font Tahoma installed (to properly see the SVG in the first place). (Or Arial for sketch-style).
    On Linux you can use the free, metric-compatible font Wine Tahoma: https://aur.archlinux.org/packages/ttf-tahoma .


► Command line with Inkscape:

  • Install Inkscape from https://inkscape.org
    + On Windows, let Inkscape be added to the PATH. (Necessary for Inkscape 1.0.1).

  • Run this to convert one file "vsm-box.svg":
      inkscape vsm-box.svg --with-gui --verb=EditSelectAll;StrokeToPath;ObjectToPath;FitCanvasToSelection;FileSave;FileQuit
      inkscape vsm-box.svg --export-filename=vsm-box.emf

  • Or make a batch file that
    + converts   1 SVG file  if given as 1 argument, or
    + converts all SVG-files in the current folder if given 0 arguments:

    svg2emf.bat:
      @echo off
      if not "%~1"=="" ( call :Convert "%~n1.svg"
      ) else           ( for %%i in (*.svg) do call :Convert "%%~i" )
      goto :EOF
      :Convert
        echo %~1 to emf
        copy "%~1" "%~n1.tmp.svg" > nul
        inkscape   "%~n1.tmp.svg" --with-gui --verb="EditSelectAll; StrokeToPath; ObjectToPath; FitCanvasToSelection; FileSave; FileQuit"
        inkscape   "%~n1.tmp.svg" --export-filename="%~n1.emf"
        del        "%~n1.tmp.svg"
      exit /b

  + Note: A bug in Inkscape 1.0.1 adds a white border to the bottom-left of the exported EMF.
  + Note: This one-liner may work in some future Inkspace version:
      inkscape "%~1" --actions="select-all; object-to-path; stroke-to-path; fit-canvas-to-selection" --export-type="emf"


► Or manually with Adobe Illustrator (this avoids Inkscape's white border):

  • Open SVG
  • Select all,  Type   -> Create Outlines                       (converts font characters to path data)
  • Select all,  Object -> Expand Appearance                     (for shadows and effects, if applicable)
  • Select all,  Object -> Path -> Outline Stroke                (makes box-border not overlapped by content bkgr, and arrows positioned well)
  • Select all,  Object -> Transform -> Scale --> 800%  (|1600)  (prevents jagged text due to Illustrator cutting off small numbers' decimals)
    + with 'Scale Corners' and 'Scale Strokes & Effects' checked.
  • File -> Export -> Export As --> [Enhanced Metafile (*.EMF)]


↪ Next, in Word:
  • Insert --> Pictures

  • Finally, when converting to a PDF:
    Make sure that your PDF converter generates vector data, not bitmaps.
    E.g. via menu Acrobat -> Create PDF.  Also use e.g. 1200dpi.
    Then zoom in on the PDF to verify vector data.





8) ===== Appendix 2:  Convert SVG to outlined SVG =====

Or: How to transform an SVG so that all its text and paths are converted to 'outlined' shapes.

This maximizes the SVG's portability across platforms where required fonts may not always be installed.
E.g. for an SVG embedded in a website, this prevents that the font might be substituted and the text misaligned.


+ This describes an automated procedure for conversion + minification using Inkscape and `svgo` (open-source SVG editor and optimizer, resp.).
  This works (at least) with current `vsm-box demo` + Inkscape 1.0.1 + svgo 1.3.2, on Windows. (Linux should be doable similarly).

  • Install Inkscape from https://inkscape.org
    + On Windows, let Inkscape be added to the PATH. (Necessary for Inkscape 1.0.1).

  • Install `svgo` (see https://github.com/svg/svgo) with `npm` like:
    `npm install -g svgo@1.3.2`.

  • You should have the font Tahoma installed (to properly see the SVG in the first place). (Or Arial for sketch-style).
    + On Linux you can use the free, metric-compatible font Wine Tahoma: https://aur.archlinux.org/packages/ttf-tahoma .

  • Make a batch file that
    + processes   1 SVG file  if given as 1 argument, or
    + processes all SVG-files in the current folder if given 0 arguments:

    svg-outline.bat:
      @echo off
      if not "%~1"=="" ( call :Convert "%~n1.svg"
      ) else           ( for %%i in (*.svg) do call :Convert "%%~i" )
      goto :EOF

      :Convert
      set "svg2=%~n1.o.svg"
      echo %~1 to outlines: %svg2%
      copy "%~1" "%svg2%" > nul

      REM A preprocessing step in case the SVG was already saved by Illustrator: reset font name, and re-add `path{stroke:none;}`.
      REM (Note: on *nix, this could be done with:
      REM   sed -i "s/({font-family:)'(Arial)MT'(;})/$1$2$3/g" __.svg
      REM   sed -i "s/(<\/style>)/path{stroke:none;}$1/g" __.svg       ).
      call powershell -Command "& {[IO.File]::WriteAllText('%svg2%', ([IO.File]::ReadAllText('%svg2%') -replace \"({font-family:)'(Arial)MT'(;})\", '$1$2$3' -replace \"(\W/style\W)\", 'path{stroke:none;}$1'))};"

      REM Make Inkscape convert text, lines etc. to filled paths.
      set VERBS=EditSelectAll; SelectionUnGroup; StrokeToPath; ObjectToPath; SelectionUnGroup; FitCanvasToSelection
      call inkscape "%svg2%" --with-gui --verb="%VERBS%; FileVacuum; FileSave; FileQuit"

      REM Minimize. Some elements and many attrs added by Inkscape can be removed, because after outlining,
      REM only non-empty paths are visible (so no `d="M..V.."` lines) and only their `fill` attribute has an effect.
      set ARGS=--pretty --indent=0 --quiet --precision=2 --multipass ^
        --disable=removeDesc,mergePaths --enable=removeDimensions,cleanupListOfValues,inlineStyles,sortAttrs
      set CONFIG={ ""plugins"": [ ^
        { ""removeAttrs"": { ""attrs"": [ ^
          ""path:d:M[ -]*[\\d\\.]+[ ,-]+[\\d\\.]+[ ]*[VvHhLl][ -]*[\\d\\.]+[ ,-]*[\\d\\.]*[ ]*[Zz]?"", ^
          ""*:style:*"", ""id"", ""aria-label"", ""font-family"", ""font-weight"", ""font-size"", ""font-style"", ^
          ""overflow"", ""color"", ""stroke-width"", ""stroke-dasharray"", ""stroke-linecap"" ^
        ] } }, ^
        { ""inlineStyles"": { ""onlyMatchedOnce"": false } }, ^
        { ""convertPathData"": { ""noSpaceAfterFlags"": false } } ^
      ] }
      call svgo %ARGS% --config="%CONFIG%" "%svg2%"

      REM Convert CR+LF to LF, remove invisible paths, add a <style> to keep Inkscape emf-export work, and update `<desc>`.
      call powershell -Command "& {[IO.File]::WriteAllText('%svg2%', ([IO.File]::ReadAllText('%svg2%') -replace \"`r`n\", \"`n\" -replace '\<path .*?fill="""none""".*?/\>', '' -replace \"`n`n\", \"`n\" -replace '(\<style)/\>', '$1>path{stroke:none}</style>' -replace \"`n(Created with https://vsm.github.io/demo)`n\", '$1 and its svg-outline script'))};"

      exit /b

  • Run it.

